{
  "/users": {
    "get": {
      "description": "Get a page of a list of users. Based on query string parameters, select users from a team, channel, or select users not in a specific channel.\n##### Permissions\nRequires an active session and (if specified) membership to the channel or team being selected from.\n",
      "parameters": [
        {
          "default": "0",
          "description": "The page to select.",
          "in": "query",
          "name": "page",
          "type": "string"
        },
        {
          "default": "60",
          "description": "The number of users per page.",
          "in": "query",
          "name": "per_page",
          "type": "string"
        },
        {
          "description": "The ID of the team to get users for.",
          "in": "query",
          "name": "in_team",
          "type": "string"
        },
        {
          "description": "The ID of the team to exclude users for. Must not be used with \"in_team\" query parameter.",
          "in": "query",
          "name": "not_in_team",
          "type": "string"
        },
        {
          "description": "The ID of the channel to get users for.",
          "in": "query",
          "name": "in_channel",
          "type": "string"
        },
        {
          "description": "The ID of the channel to exclude users for. Must be used with \"in_channel\" query parameter.",
          "in": "query",
          "name": "not_in_channel",
          "type": "string"
        },
        {
          "description": "Whether or not to list users that are not on any team. This option takes precendence over `in_team`, `in_channel`, and `not_in_channel`.",
          "in": "query",
          "name": "without_team",
          "type": "boolean"
        }
      ],
      "responses": {
        "200": {
          "description": "User page retrieval successful",
          "schema": {
            "items": {
              "$ref": "#/definitions/User"
            },
            "type": "array"
          }
        },
        "400": {
          "$ref": "#/responses/BadRequest"
        },
        "401": {
          "$ref": "#/responses/Unauthorized"
        },
        "403": {
          "$ref": "#/responses/Forbidden"
        }
      },
      "summary": "Get users",
      "tags": [
        "users"
      ],
      "x-code-samples": [
        {
          "lang": "Go",
          "source": "import \"github.com/mattermost/platform/model\"\n\nClient := model.NewAPIv4Client(\"https://your-mattermost-url.com\")\nClient.Login(\"email@domain.com\", \"Password1\")\n\n\n// page, perPage, etag\nusers := Client.GetUsers(0, 60, \"\")\nusers = Client.GetUsersInChannel(\"channelid\", 0, 60, \"\")\nusers = Client.GetUsersNotInChannel(\"teamid\", \"channelid\", 0, 60, \"\")\nusers = Client.GetUsersInTeam(\"teamid\", 0, 60, \"\")\nusers = Client.GetUsersNotInTeam(\"teamid\", 0, 60, \"\")\nusers = Client.GetUsersWithoutTeam(0, 60, \"\")\n"
        }
      ]
    },
    "post": {
      "description": "Create a new user on the system.\n##### Permissions\nNo permission required but user creation can be controlled by server configuration.\n",
      "parameters": [
        {
          "description": "User object to be created",
          "in": "body",
          "name": "body",
          "required": true,
          "schema": {
            "properties": {
              "email": {
                "type": "string"
              },
              "first_name": {
                "type": "string"
              },
              "last_name": {
                "type": "string"
              },
              "locale": {
                "type": "string"
              },
              "nickname": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "props": {
                "type": "object"
              },
              "username": {
                "type": "string"
              }
            },
            "required": [
              "email",
              "username",
              "password"
            ],
            "type": "object"
          }
        }
      ],
      "responses": {
        "201": {
          "description": "User creation successful",
          "schema": {
            "$ref": "#/definitions/User"
          }
        },
        "400": {
          "$ref": "#/responses/BadRequest"
        },
        "403": {
          "$ref": "#/responses/Forbidden"
        }
      },
      "summary": "Create a user",
      "tags": [
        "users"
      ],
      "x-code-samples": [
        {
          "lang": "Go",
          "source": "import \"github.com/mattermost/platform/model\"\n\nClient := model.NewAPIv4Client(\"https://your-mattermost-url.com\")\n\nuser := &model.User{\n    Username = \"username\",\n    Email = \"email@domain.com\",\n    Password = \"Password1\",\n}\n\ncreatedUser, response := Client.CreateUser(user)\n"
        }
      ]
    }
  },
  "/users/autocomplete": {
    "get": {
      "description": "Get a list of users for the purpose of autocompleting based on the provided search term. Specify a combination of `team_id` and `channel_id` to filter results further.\n##### Permissions\nRequires an active session and `view_team` and `read_channel` on any teams or channels used to filter the results further.\n",
      "parameters": [
        {
          "description": "Team ID",
          "in": "query",
          "name": "team_id",
          "type": "string"
        },
        {
          "description": "Channel ID",
          "in": "query",
          "name": "channel_id",
          "type": "string"
        },
        {
          "description": "Username, nickname first name or last name",
          "in": "query",
          "name": "name",
          "required": true,
          "type": "string"
        }
      ],
      "responses": {
        "200": {
          "description": "User autocomplete successful",
          "schema": {
            "$ref": "#/definitions/UserAutocomplete"
          }
        },
        "400": {
          "$ref": "#/responses/BadRequest"
        },
        "401": {
          "$ref": "#/responses/Unauthorized"
        },
        "403": {
          "$ref": "#/responses/Forbidden"
        }
      },
      "summary": "Autocomplete users",
      "tags": [
        "users"
      ]
    }
  },
  "/users/email/verify": {
    "post": {
      "description": "Verify the email used by a user to sign-up their account with.\n##### Permissions\nNo permissions required.\n",
      "parameters": [
        {
          "in": "body",
          "name": "body",
          "required": true,
          "schema": {
            "properties": {
              "token": {
                "description": "The token given to validate the email",
                "type": "string"
              }
            },
            "required": [
              "token"
            ],
            "type": "object"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "User email verification successful",
          "schema": {
            "$ref": "#/definitions/StatusOK"
          }
        },
        "400": {
          "$ref": "#/responses/BadRequest"
        }
      },
      "summary": "Verify user email",
      "tags": [
        "users"
      ]
    }
  },
  "/users/email/verify/send": {
    "post": {
      "description": "Send an email with a verification link to a user that has an email matching the one in the request body. This endpoint will return success even if the email does not match any users on the system.\n##### Permissions\nNo permissions required.\n",
      "parameters": [
        {
          "in": "body",
          "name": "body",
          "required": true,
          "schema": {
            "properties": {
              "email": {
                "description": "Email of a user",
                "type": "string"
              }
            },
            "required": [
              "email"
            ],
            "type": "object"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Email send successful if email exists",
          "schema": {
            "$ref": "#/definitions/StatusOK"
          }
        },
        "400": {
          "$ref": "#/responses/BadRequest"
        }
      },
      "summary": "Send verification email",
      "tags": [
        "users"
      ]
    }
  },
  "/users/email/{email}": {
    "get": {
      "description": "Get a user object by providing a user email. Sensitive information will be sanitized out.\n##### Permissions\nRequires an active session but no other permissions.\n",
      "parameters": [
        {
          "description": "User Email",
          "in": "path",
          "name": "email",
          "required": true,
          "type": "string"
        }
      ],
      "responses": {
        "200": {
          "description": "User retrieval successful",
          "schema": {
            "$ref": "#/definitions/User"
          }
        },
        "400": {
          "$ref": "#/responses/BadRequest"
        },
        "401": {
          "$ref": "#/responses/Unauthorized"
        },
        "404": {
          "$ref": "#/responses/NotFound"
        }
      },
      "summary": "Get a user by email",
      "tags": [
        "users"
      ]
    }
  },
  "/users/ids": {
    "post": {
      "description": "Get a list of users based on a provided list of user ids.\n##### Permissions\nRequires an active session but no other permissions.\n",
      "parameters": [
        {
          "description": "List of user ids",
          "in": "body",
          "name": "body",
          "required": true,
          "schema": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "User list retrieval successful",
          "schema": {
            "items": {
              "$ref": "#/definitions/User"
            },
            "type": "array"
          }
        },
        "400": {
          "$ref": "#/responses/BadRequest"
        },
        "401": {
          "$ref": "#/responses/Unauthorized"
        }
      },
      "summary": "Get users by ids",
      "tags": [
        "users"
      ]
    }
  },
  "/users/login/switch": {
    "post": {
      "description": "Switch a user's login method from using email to OAuth2/SAML/LDAP or back to email. When switching to OAuth2/SAML, account switching is not complete until the user follows the returned link and completes any steps on the OAuth2/SAML service provider.\n\nTo switch from email to OAuth2/SAML, specify `current_service`, `new_service`, `email` and `password`.\n\nTo switch from OAuth2/SAML to email, specify `current_service`, `new_service`, `email` and `new_password`.\n\nTo switch from email to LDAP/AD, specify `current_service`, `new_service`, `email`, `password`, `ldap_ip` and `new_password` (this is the user's LDAP password).\n\nTo switch from LDAP/AD to email, specify `current_service`, `new_service`, `ldap_ip`, `password` (this is the user's LDAP password), `email`  and `new_password`.\n\nAdditionally, specify `mfa_code` when trying to switch an account on LDAP/AD or email that has MFA activated.\n\n##### Permissions\nNo current authentication required except when switching from OAuth2/SAML to email.\n",
      "parameters": [
        {
          "in": "body",
          "name": "body",
          "required": true,
          "schema": {
            "properties": {
              "current_service": {
                "description": "The service the user currently uses to login",
                "type": "string"
              },
              "email": {
                "description": "The email of the user",
                "type": "string"
              },
              "ldap_id": {
                "description": "The LDAP/AD id of the user",
                "type": "string"
              },
              "mfa_code": {
                "description": "The MFA code of the current service",
                "type": "string"
              },
              "new_service": {
                "description": "The service the user will use to login",
                "type": "string"
              },
              "password": {
                "description": "The password used with the current service",
                "type": "string"
              }
            },
            "required": [
              "current_service",
              "new_service"
            ],
            "type": "object"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Login method switch or request successful",
          "schema": {
            "properties": {
              "follow_link": {
                "description": "The link for the user to follow to login or to complete the account switching when the current service is OAuth2/SAML",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "400": {
          "$ref": "#/responses/BadRequest"
        },
        "401": {
          "$ref": "#/responses/Unauthorized"
        },
        "403": {
          "$ref": "#/responses/Forbidden"
        },
        "404": {
          "$ref": "#/responses/NotFound"
        },
        "501": {
          "$ref": "#/responses/NotImplemented"
        }
      },
      "summary": "Switch login method",
      "tags": [
        "users"
      ]
    }
  },
  "/users/mfa": {
    "post": {
      "description": "Check if a user has multi-factor authentication active on their account by providing a login id. Used to check whether an MFA code needs to be provided when logging in.\n##### Permissions\nNo permission required.\n",
      "parameters": [
        {
          "in": "body",
          "name": "body",
          "required": true,
          "schema": {
            "properties": {
              "login_id": {
                "description": "The email or username used to login",
                "type": "string"
              }
            },
            "required": [
              "login_id"
            ],
            "type": "object"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "MFA check successful",
          "schema": {
            "properties": {
              "mfa_required": {
                "description": "Value will `true` if MFA is active, `false` otherwise",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        },
        "400": {
          "$ref": "#/responses/BadRequest"
        }
      },
      "summary": "Check MFA",
      "tags": [
        "users"
      ]
    }
  },
  "/users/password/reset": {
    "post": {
      "description": "Update the password for a user using a one-use, timed recovery code tied to the user's account. Only works for non-SSO users.\n##### Permissions\nNo permissions required.\n",
      "parameters": [
        {
          "in": "body",
          "name": "body",
          "required": true,
          "schema": {
            "properties": {
              "code": {
                "description": "The recovery code",
                "type": "string"
              },
              "new_password": {
                "description": "The new password for the user",
                "type": "string"
              }
            },
            "required": [
              "code",
              "new_password"
            ],
            "type": "object"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "User password update successful",
          "schema": {
            "$ref": "#/definitions/StatusOK"
          }
        },
        "400": {
          "$ref": "#/responses/BadRequest"
        },
        "401": {
          "$ref": "#/responses/Unauthorized"
        },
        "403": {
          "$ref": "#/responses/Forbidden"
        }
      },
      "summary": "Reset password",
      "tags": [
        "users"
      ]
    }
  },
  "/users/password/reset/send": {
    "post": {
      "description": "Send an email containing a link for resetting the user's password. The link will contain a one-use, timed recovery code tied to the user's account. Only works for non-SSO users.\n##### Permissions\nNo permissions required.\n",
      "parameters": [
        {
          "in": "body",
          "name": "body",
          "required": true,
          "schema": {
            "properties": {
              "email": {
                "description": "The email of the user",
                "type": "string"
              }
            },
            "required": [
              "email"
            ],
            "type": "object"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Email sent if account exists",
          "schema": {
            "$ref": "#/definitions/StatusOK"
          }
        },
        "400": {
          "$ref": "#/responses/BadRequest"
        },
        "401": {
          "$ref": "#/responses/Unauthorized"
        },
        "403": {
          "$ref": "#/responses/Forbidden"
        }
      },
      "summary": "Send password reset email",
      "tags": [
        "users"
      ]
    }
  },
  "/users/search": {
    "post": {
      "description": "Get a list of users based on search criteria provided in the request body. Searches are typically done against username, full name, nickname and email unless otherwise configured by the server.\n##### Permissions\nRequires an active session and `read_channel` and/or `view_team` permissions for any channels or teams specified in the request body.\n",
      "parameters": [
        {
          "description": "Search criteria",
          "in": "body",
          "name": "body",
          "required": true,
          "schema": {
            "properties": {
              "allow_inactive": {
                "description": "When `true`, include deactivated users in the results",
                "type": "boolean"
              },
              "in_channel_id": {
                "description": "If provided, only search users in this channel",
                "type": "string"
              },
              "not_in_channel_id": {
                "description": "If provided, only search users not in this channel. Must specifiy `team_id` when using this option",
                "type": "string"
              },
              "not_in_team_id": {
                "description": "If provided, only search users not on this team",
                "type": "string"
              },
              "team_id": {
                "description": "If provided, only search users on this team",
                "type": "string"
              },
              "term": {
                "description": "The term to match against username, full name, nickname and email",
                "type": "string"
              },
              "without_team": {
                "description": "Set this to `true` if you would like to search for users that are not on a team. This option takes precendence over `team_id`, `in_channel_id`, and `not_in_channel_id`.",
                "type": "boolean"
              }
            },
            "required": [
              "term"
            ],
            "type": "object"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "User list retrieval successful",
          "schema": {
            "items": {
              "$ref": "#/definitions/User"
            },
            "type": "array"
          }
        },
        "400": {
          "$ref": "#/responses/BadRequest"
        },
        "401": {
          "$ref": "#/responses/Unauthorized"
        },
        "403": {
          "$ref": "#/responses/Forbidden"
        }
      },
      "summary": "Search users",
      "tags": [
        "users"
      ]
    }
  },
  "/users/sessions/device": {
    "put": {
      "description": "Attach a mobile device id to the currently logged in session. This will enable push notiofications for a user, if configured by the server.\n##### Permissions\nMust be authenticated.\n",
      "parameters": [
        {
          "in": "body",
          "name": "body",
          "required": true,
          "schema": {
            "properties": {
              "device_id": {
                "description": "Mobile device id. For Android prefix the id with `android:` and Apple with `apple:`",
                "type": "string"
              }
            },
            "required": [
              "device_id"
            ],
            "type": "object"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Device id attach successful",
          "schema": {
            "$ref": "#/definitions/StatusOK"
          }
        },
        "400": {
          "$ref": "#/responses/BadRequest"
        },
        "401": {
          "$ref": "#/responses/Unauthorized"
        }
      },
      "summary": "Attach mobile device",
      "tags": [
        "users"
      ]
    }
  },
  "/users/username/{username}": {
    "get": {
      "description": "Get a user object by providing a username. Sensitive information will be sanitized out.\n##### Permissions\nRequires an active session but no other permissions.\n",
      "parameters": [
        {
          "description": "Username",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "responses": {
        "200": {
          "description": "User retrieval successful",
          "schema": {
            "$ref": "#/definitions/User"
          }
        },
        "400": {
          "$ref": "#/responses/BadRequest"
        },
        "401": {
          "$ref": "#/responses/Unauthorized"
        },
        "404": {
          "$ref": "#/responses/NotFound"
        }
      },
      "summary": "Get a user by username",
      "tags": [
        "users"
      ]
    }
  },
  "/users/usernames": {
    "post": {
      "description": "Get a list of users based on a provided list of usernames.\n##### Permissions\nRequires an active session but no other permissions.\n",
      "parameters": [
        {
          "description": "List of usernames",
          "in": "body",
          "name": "body",
          "required": true,
          "schema": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "User list retrieval successful",
          "schema": {
            "items": {
              "$ref": "#/definitions/User"
            },
            "type": "array"
          }
        },
        "400": {
          "$ref": "#/responses/BadRequest"
        },
        "401": {
          "$ref": "#/responses/Unauthorized"
        }
      },
      "summary": "Get users by usernames",
      "tags": [
        "users"
      ]
    }
  },
  "/users/{user_id}": {
    "delete": {
      "description": "Deactivates the user by archiving its user object.\n##### Permissions\nMust be logged in as the user being deactivated or have the `edit_other_users` permission.\n",
      "parameters": [
        {
          "description": "User GUID",
          "in": "path",
          "name": "user_id",
          "required": true,
          "type": "string"
        }
      ],
      "responses": {
        "200": {
          "description": "User deactivation successful",
          "schema": {
            "$ref": "#/definitions/StatusOK"
          }
        },
        "400": {
          "$ref": "#/responses/BadRequest"
        },
        "401": {
          "$ref": "#/responses/Unauthorized"
        },
        "403": {
          "$ref": "#/responses/Forbidden"
        },
        "404": {
          "$ref": "#/responses/NotFound"
        }
      },
      "summary": "Deactivate a user account.",
      "tags": [
        "users"
      ]
    },
    "get": {
      "description": "Get a user a object. Sensitive information will be sanitized out.\n##### Permissions\nRequires an active session but no other permissions.\n",
      "parameters": [
        {
          "description": "User GUID",
          "in": "path",
          "name": "user_id",
          "required": true,
          "type": "string"
        }
      ],
      "responses": {
        "200": {
          "description": "User retrieval successful",
          "schema": {
            "$ref": "#/definitions/User"
          }
        },
        "400": {
          "$ref": "#/responses/BadRequest"
        },
        "401": {
          "$ref": "#/responses/Unauthorized"
        },
        "404": {
          "$ref": "#/responses/NotFound"
        }
      },
      "summary": "Get a user",
      "tags": [
        "users"
      ]
    },
    "put": {
      "description": "Update a user by providing the user object. The fields that can be updated are defined in the request body, all other provided fields will be ignored.\n##### Permissions\nMust be logged in as the user being updated or have the `edit_other_users` permission.\n",
      "parameters": [
        {
          "description": "User GUID",
          "in": "path",
          "name": "user_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "User object that is to be updated",
          "in": "body",
          "name": "body",
          "required": true,
          "schema": {
            "properties": {
              "email": {
                "type": "string"
              },
              "first_name": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "last_name": {
                "type": "string"
              },
              "locale": {
                "type": "string"
              },
              "nickname": {
                "type": "string"
              },
              "notify_props": {
                "type": "object"
              },
              "position": {
                "type": "string"
              },
              "props": {
                "type": "object"
              },
              "username": {
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "User update successful",
          "schema": {
            "$ref": "#/definitions/User"
          }
        },
        "400": {
          "$ref": "#/responses/BadRequest"
        },
        "401": {
          "$ref": "#/responses/Unauthorized"
        },
        "403": {
          "$ref": "#/responses/Forbidden"
        }
      },
      "summary": "Update a user",
      "tags": [
        "users"
      ]
    }
  },
  "/users/{user_id}/active": {
    "put": {
      "description": "Update user active or inactive status\n##### Permissions\nUser can deactivate itself.\nUser with `manage_system` permission can activate or deactivate a user.\n",
      "parameters": [
        {
          "description": "User GUID",
          "in": "path",
          "name": "user_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "Use `true` to set the user active, `false` for inactive",
          "in": "body",
          "name": "body",
          "required": true,
          "schema": {
            "properties": {
              "active": {
                "type": "boolean"
              }
            },
            "required": [
              "active"
            ],
            "type": "object"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "User active status update successful",
          "schema": {
            "$ref": "#/definitions/StatusOK"
          }
        },
        "400": {
          "$ref": "#/responses/BadRequest"
        },
        "401": {
          "$ref": "#/responses/Unauthorized"
        },
        "403": {
          "$ref": "#/responses/Forbidden"
        }
      },
      "summary": "Update user active status",
      "tags": [
        "users"
      ]
    }
  },
  "/users/{user_id}/audits": {
    "get": {
      "description": "Get a list of audit by providing the user GUID.\n##### Permissions\nMust be logged in as the user or have the `edit_other_users` permission.\n",
      "parameters": [
        {
          "description": "User GUID",
          "in": "path",
          "name": "user_id",
          "required": true,
          "type": "string"
        }
      ],
      "responses": {
        "200": {
          "description": "User audits retrieval successful",
          "schema": {
            "items": {
              "$ref": "#/definitions/Audit"
            },
            "type": "array"
          }
        },
        "400": {
          "$ref": "#/responses/BadRequest"
        },
        "401": {
          "$ref": "#/responses/Unauthorized"
        },
        "403": {
          "$ref": "#/responses/Forbidden"
        }
      },
      "summary": "Get user's audits",
      "tags": [
        "users"
      ]
    }
  },
  "/users/{user_id}/image": {
    "get": {
      "description": "Get a user's profile image based on user_id string parameter.\n##### Permissions\nMust be logged in.\n",
      "parameters": [
        {
          "description": "User GUID",
          "in": "path",
          "name": "user_id",
          "required": true,
          "type": "string"
        }
      ],
      "responses": {
        "400": {
          "$ref": "#/responses/BadRequest"
        },
        "401": {
          "$ref": "#/responses/Unauthorized"
        },
        "403": {
          "$ref": "#/responses/Forbidden"
        },
        "404": {
          "$ref": "#/responses/NotFound"
        },
        "501": {
          "$ref": "#/responses/NotImplemented"
        }
      },
      "summary": "Get user's profile image",
      "tags": [
        "users"
      ]
    },
    "post": {
      "consumes": [
        "multipart/form-data"
      ],
      "description": "Set a user's profile image based on user_id string parameter.\n##### Permissions\nMust be logged in as the user being updated or have the `edit_other_users` permission.\n",
      "parameters": [
        {
          "description": "The image to be uploaded",
          "in": "formData",
          "name": "image",
          "required": true,
          "type": "file"
        },
        {
          "description": "User GUID",
          "in": "path",
          "name": "user_id",
          "required": true,
          "type": "string"
        }
      ],
      "responses": {
        "200": {
          "description": "Profile image set successful",
          "schema": {
            "$ref": "#/definitions/StatusOK"
          }
        },
        "400": {
          "$ref": "#/responses/BadRequest"
        },
        "401": {
          "$ref": "#/responses/Unauthorized"
        },
        "403": {
          "$ref": "#/responses/Forbidden"
        },
        "404": {
          "$ref": "#/responses/NotFound"
        },
        "501": {
          "$ref": "#/responses/NotImplemented"
        }
      },
      "summary": "Set user's profile image",
      "tags": [
        "users"
      ]
    }
  },
  "/users/{user_id}/mfa": {
    "put": {
      "description": "Activates multi-factor authentication for the user if `activate` is true and a valid `code` is provided. If activate is false, then `code` is not required and multi-factor authentication is disabled for the user.\n##### Permissions\nMust be logged in as the user being updated or have the `edit_other_users` permission.\n",
      "parameters": [
        {
          "description": "User GUID",
          "in": "path",
          "name": "user_id",
          "required": true,
          "type": "string"
        },
        {
          "in": "body",
          "name": "body",
          "required": true,
          "schema": {
            "properties": {
              "activate": {
                "description": "Use `true` to activate, `false` to deactivate",
                "type": "boolean"
              },
              "code": {
                "description": "The code produced by your MFA client. Required if `activate` is true",
                "type": "string"
              }
            },
            "required": [
              "activate"
            ],
            "type": "object"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "User MFA update successful",
          "schema": {
            "$ref": "#/definitions/StatusOK"
          }
        },
        "400": {
          "$ref": "#/responses/BadRequest"
        },
        "401": {
          "$ref": "#/responses/Unauthorized"
        },
        "403": {
          "$ref": "#/responses/Forbidden"
        },
        "501": {
          "$ref": "#/responses/NotImplemented"
        }
      },
      "summary": "Update a user's MFA",
      "tags": [
        "users"
      ]
    }
  },
  "/users/{user_id}/mfa/generate": {
    "post": {
      "description": "Generates an multi-factor authentication secret for a user and returns it as a string and as base64 encoded QR code image.\n##### Permissions\nMust be logged in as the user or have the `edit_other_users` permission.\n",
      "parameters": [
        {
          "description": "User GUID",
          "in": "path",
          "name": "user_id",
          "required": true,
          "type": "string"
        }
      ],
      "responses": {
        "200": {
          "description": "MFA secret generation successful",
          "schema": {
            "properties": {
              "qr_code": {
                "description": "A base64 encoded QR code image",
                "type": "string"
              },
              "secret": {
                "description": "The MFA secret as a string",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "400": {
          "$ref": "#/responses/BadRequest"
        },
        "401": {
          "$ref": "#/responses/Unauthorized"
        },
        "403": {
          "$ref": "#/responses/Forbidden"
        },
        "404": {
          "$ref": "#/responses/NotFound"
        },
        "501": {
          "$ref": "#/responses/NotImplemented"
        }
      },
      "summary": "Generate MFA secret",
      "tags": [
        "users"
      ]
    }
  },
  "/users/{user_id}/password": {
    "put": {
      "description": "Update a user's password. New password must meet password policy set by server configuration.\n##### Permissions\nMust be logged in as the user the password is being changed for or have `manage_system` permission.\n",
      "parameters": [
        {
          "description": "User GUID",
          "in": "path",
          "name": "user_id",
          "required": true,
          "type": "string"
        },
        {
          "in": "body",
          "name": "body",
          "required": true,
          "schema": {
            "properties": {
              "current_password": {
                "description": "The current password for the user",
                "type": "string"
              },
              "new_password": {
                "description": "The new password for the user",
                "type": "string"
              }
            },
            "required": [
              "current_password",
              "new_password"
            ],
            "type": "object"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "User password update successful",
          "schema": {
            "$ref": "#/definitions/StatusOK"
          }
        },
        "400": {
          "$ref": "#/responses/BadRequest"
        },
        "401": {
          "$ref": "#/responses/Unauthorized"
        },
        "403": {
          "$ref": "#/responses/Forbidden"
        }
      },
      "summary": "Update a user's password",
      "tags": [
        "users"
      ]
    }
  },
  "/users/{user_id}/patch": {
    "put": {
      "description": "Partially update a user by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored.\n##### Permissions\nMust be logged in as the user being updated or have the `edit_other_users` permission.\n",
      "parameters": [
        {
          "description": "User GUID",
          "in": "path",
          "name": "user_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "User object that is to be updated",
          "in": "body",
          "name": "body",
          "required": true,
          "schema": {
            "properties": {
              "email": {
                "type": "string"
              },
              "first_name": {
                "type": "string"
              },
              "last_name": {
                "type": "string"
              },
              "locale": {
                "type": "string"
              },
              "nickname": {
                "type": "string"
              },
              "notify_props": {
                "type": "object"
              },
              "position": {
                "type": "string"
              },
              "props": {
                "type": "object"
              },
              "username": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "User patch successful",
          "schema": {
            "$ref": "#/definitions/User"
          }
        },
        "400": {
          "$ref": "#/responses/BadRequest"
        },
        "401": {
          "$ref": "#/responses/Unauthorized"
        },
        "403": {
          "$ref": "#/responses/Forbidden"
        }
      },
      "summary": "Patch a user",
      "tags": [
        "users"
      ]
    }
  },
  "/users/{user_id}/roles": {
    "put": {
      "description": "Update a user's system-level roles. Valid user roles are \"system_user\", \"system_admin\" or both of them. Overwrites any previously assigned system-level roles.\n##### Permissions\nMust have the `manage_roles` permission.\n",
      "parameters": [
        {
          "description": "User GUID",
          "in": "path",
          "name": "user_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "Space-delimited system roles to assign to the user",
          "in": "body",
          "name": "roles",
          "required": true,
          "schema": {
            "properties": {
              "roles": {
                "type": "string"
              }
            },
            "required": [
              "roles"
            ],
            "type": "object"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "User roles update successful",
          "schema": {
            "$ref": "#/definitions/StatusOK"
          }
        },
        "400": {
          "$ref": "#/responses/BadRequest"
        },
        "401": {
          "$ref": "#/responses/Unauthorized"
        },
        "403": {
          "$ref": "#/responses/Forbidden"
        }
      },
      "summary": "Update a user's roles",
      "tags": [
        "users"
      ]
    }
  },
  "/users/{user_id}/sessions": {
    "get": {
      "description": "Get a list of sessions by providing the user GUID. Sensitive information will be sanitized out.\n##### Permissions\nMust be logged in as the user being updated or have the `edit_other_users` permission.\n",
      "parameters": [
        {
          "description": "User GUID",
          "in": "path",
          "name": "user_id",
          "required": true,
          "type": "string"
        }
      ],
      "responses": {
        "200": {
          "description": "User session retrieval successful",
          "schema": {
            "items": {
              "$ref": "#/definitions/Session"
            },
            "type": "array"
          }
        },
        "400": {
          "$ref": "#/responses/BadRequest"
        },
        "401": {
          "$ref": "#/responses/Unauthorized"
        },
        "403": {
          "$ref": "#/responses/Forbidden"
        }
      },
      "summary": "Get user's sessions",
      "tags": [
        "users"
      ]
    }
  },
  "/users/{user_id}/sessions/revoke": {
    "post": {
      "description": "Revokes a user session from the provided user id and session id strings.\n##### Permissions\nMust be logged in as the user being updated or have the `edit_other_users` permission.\n",
      "parameters": [
        {
          "description": "User GUID",
          "in": "path",
          "name": "user_id",
          "required": true,
          "type": "string"
        },
        {
          "in": "body",
          "name": "body",
          "required": true,
          "schema": {
            "properties": {
              "session_id": {
                "description": "The session GUID to revoke.",
                "type": "string"
              }
            },
            "required": [
              "session_id"
            ],
            "type": "object"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "User session revoked successful",
          "schema": {
            "$ref": "#/definitions/StatusOK"
          }
        },
        "400": {
          "$ref": "#/responses/BadRequest"
        },
        "401": {
          "$ref": "#/responses/Unauthorized"
        },
        "403": {
          "$ref": "#/responses/Forbidden"
        }
      },
      "summary": "Revoke a user session",
      "tags": [
        "users"
      ]
    }
  }
}