{
  "/hooks/incoming": {
    "get": {
      "description": "Get a page of a list of incoming webhooks. Optionally filter for a specific team using query parameters.\n##### Permissions\n`manage_webhooks` for the system or `manage_webhooks` for the specific team.\n",
      "parameters": [
        {
          "default": "0",
          "description": "The page to select.",
          "in": "query",
          "name": "page",
          "type": "string"
        },
        {
          "default": "60",
          "description": "The number of hooks per page.",
          "in": "query",
          "name": "per_page",
          "type": "string"
        },
        {
          "description": "The ID of the team to get hooks for.",
          "in": "query",
          "name": "team_id",
          "type": "string"
        }
      ],
      "responses": {
        "200": {
          "description": "Incoming webhooks retrieval successful",
          "schema": {
            "items": {
              "$ref": "#/definitions/IncomingWebhook"
            },
            "type": "array"
          }
        },
        "400": {
          "$ref": "#/responses/BadRequest"
        },
        "401": {
          "$ref": "#/responses/Unauthorized"
        },
        "403": {
          "$ref": "#/responses/Forbidden"
        }
      },
      "summary": "List incoming webhooks",
      "tags": [
        "webhooks"
      ]
    },
    "post": {
      "description": "Create an incoming webhook for a channel.\n##### Permissions\n`manage_webhooks` for the channel the webhook is in.\n",
      "parameters": [
        {
          "description": "Incoming webhook to be created",
          "in": "body",
          "name": "body",
          "required": true,
          "schema": {
            "properties": {
              "channel_id": {
                "description": "The ID of a public channel or private group that receives the webhook payloads.",
                "type": "string"
              },
              "description": {
                "description": "The description for this incoming webhook",
                "type": "string"
              },
              "display_name": {
                "description": "The display name for this incoming webhook",
                "type": "string"
              }
            },
            "required": [
              "channel_id"
            ],
            "type": "object"
          }
        }
      ],
      "responses": {
        "201": {
          "description": "Incoming webhook creation successful",
          "schema": {
            "$ref": "#/definitions/IncomingWebhook"
          }
        },
        "400": {
          "$ref": "#/responses/BadRequest"
        },
        "401": {
          "$ref": "#/responses/Unauthorized"
        },
        "403": {
          "$ref": "#/responses/Forbidden"
        }
      },
      "summary": "Create an incoming webhook",
      "tags": [
        "webhooks"
      ]
    }
  },
  "/hooks/incoming/{hook_id}": {
    "get": {
      "description": "Get an incoming webhook given the hook id.\n##### Permissions\n`manage_webhooks` for system or `manage_webhooks` for the specific team or `manage_webhooks` for the channel.\n",
      "parameters": [
        {
          "description": "Incoming Webhook GUID",
          "in": "path",
          "name": "hook_id",
          "required": true,
          "type": "string"
        }
      ],
      "responses": {
        "200": {
          "description": "Webhook retrieval successful",
          "schema": {
            "$ref": "#/definitions/IncomingWebhook"
          }
        },
        "400": {
          "$ref": "#/responses/BadRequest"
        },
        "401": {
          "$ref": "#/responses/Unauthorized"
        },
        "403": {
          "$ref": "#/responses/Forbidden"
        },
        "404": {
          "$ref": "#/responses/NotFound"
        }
      },
      "summary": "Get an incoming webhook",
      "tags": [
        "webhooks"
      ]
    },
    "put": {
      "description": "Update an incoming webhook given the hook id.\n##### Permissions\n`manage_webhooks` for system or `manage_webhooks` for the specific team or `manage_webhooks` for the channel.\n",
      "parameters": [
        {
          "description": "Incoming Webhook GUID",
          "in": "path",
          "name": "hook_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "Incoming webhook to be updated",
          "in": "body",
          "name": "body",
          "required": true,
          "schema": {
            "properties": {
              "channel_id": {
                "description": "The ID of a public channel or private group that receives the webhook payloads.",
                "type": "string"
              },
              "description": {
                "description": "The description for this incoming webhook",
                "type": "string"
              },
              "display_name": {
                "description": "The display name for this incoming webhook",
                "type": "string"
              },
              "hook_id": {
                "description": "Incoming webhook GUID",
                "type": "string"
              }
            },
            "required": [
              "hook_id",
              "channel_id",
              "display_name",
              "description"
            ],
            "type": "object"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Webhook update successful",
          "schema": {
            "$ref": "#/definitions/IncomingWebhook"
          }
        },
        "400": {
          "$ref": "#/responses/BadRequest"
        },
        "401": {
          "$ref": "#/responses/Unauthorized"
        },
        "403": {
          "$ref": "#/responses/Forbidden"
        },
        "404": {
          "$ref": "#/responses/NotFound"
        }
      },
      "summary": "Update an incoming webhook",
      "tags": [
        "webhooks"
      ]
    }
  },
  "/hooks/outgoing": {
    "get": {
      "description": "Get a page of a list of outgoing webhooks. Optionally filter for a specific team or channel using query parameters.\n##### Permissions\n`manage_webhooks` for the system or `manage_webhooks` for the specific team/channel.\n",
      "parameters": [
        {
          "default": "0",
          "description": "The page to select.",
          "in": "query",
          "name": "page",
          "type": "string"
        },
        {
          "default": "60",
          "description": "The number of hooks per page.",
          "in": "query",
          "name": "per_page",
          "type": "string"
        },
        {
          "description": "The ID of the team to get hooks for.",
          "in": "query",
          "name": "team_id",
          "type": "string"
        },
        {
          "description": "The ID of the channel to get hooks for.",
          "in": "query",
          "name": "channel_id",
          "type": "string"
        }
      ],
      "responses": {
        "200": {
          "description": "Outgoing webhooks retrieval successful",
          "schema": {
            "items": {
              "$ref": "#/definitions/OutgoingWebhook"
            },
            "type": "array"
          }
        },
        "400": {
          "$ref": "#/responses/BadRequest"
        },
        "401": {
          "$ref": "#/responses/Unauthorized"
        },
        "403": {
          "$ref": "#/responses/Forbidden"
        },
        "404": {
          "$ref": "#/responses/NotFound"
        }
      },
      "summary": "List outgoing webhooks",
      "tags": [
        "webhooks"
      ]
    },
    "post": {
      "description": "Create an outgoing webhook for a team.\n##### Permissions\n`manage_webhooks` for the team the webhook is in.\n",
      "parameters": [
        {
          "description": "Outgoing webhook to be created",
          "in": "body",
          "name": "body",
          "required": true,
          "schema": {
            "properties": {
              "callback_urls": {
                "description": "The URLs to POST the payloads to when the webhook is triggered",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "channel_id": {
                "description": "The ID of a public channel that the webhook watchs",
                "type": "string"
              },
              "content_type": {
                "default": "application/x-www-form-urlencoded",
                "description": "The format to POST the data in, either `application/json` or `application/x-www-form-urlencoded`",
                "type": "string"
              },
              "description": {
                "description": "The description for this outgoing webhook",
                "type": "string"
              },
              "display_name": {
                "description": "The display name for this outgoing webhook",
                "type": "string"
              },
              "team_id": {
                "description": "The ID of the team that the webhook watchs",
                "type": "string"
              },
              "trigger_when": {
                "description": "When to trigger the webhook, `0` when a trigger word is present at all and `1` if the message starts with a trigger word",
                "type": "integer"
              },
              "trigger_words": {
                "description": "List of words for the webhook to trigger on",
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "team_id",
              "display_name",
              "trigger_words",
              "callback_urls"
            ],
            "type": "object"
          }
        }
      ],
      "responses": {
        "201": {
          "description": "Outgoing webhook creation successful",
          "schema": {
            "$ref": "#/definitions/OutgoingWebhook"
          }
        },
        "400": {
          "$ref": "#/responses/BadRequest"
        },
        "401": {
          "$ref": "#/responses/Unauthorized"
        },
        "403": {
          "$ref": "#/responses/Forbidden"
        },
        "404": {
          "$ref": "#/responses/NotFound"
        }
      },
      "summary": "Create an outgoing webhook",
      "tags": [
        "webhooks"
      ]
    }
  },
  "/hooks/outgoing/{hook_id}": {
    "delete": {
      "description": "Delete an outgoing webhook given the hook id.\n##### Permissions\n`manage_webhooks` for system or `manage_webhooks` for the specific team or `manage_webhooks` for the channel.\n",
      "parameters": [
        {
          "description": "Outgoing webhook GUID",
          "in": "path",
          "name": "hook_id",
          "required": true,
          "type": "string"
        }
      ],
      "responses": {
        "200": {
          "description": "Webhook deletion successful",
          "schema": {
            "$ref": "#/definitions/StatusOK"
          }
        },
        "400": {
          "$ref": "#/responses/BadRequest"
        },
        "401": {
          "$ref": "#/responses/Unauthorized"
        },
        "403": {
          "$ref": "#/responses/Forbidden"
        },
        "404": {
          "$ref": "#/responses/NotFound"
        }
      },
      "summary": "Delete an outgoing webhook",
      "tags": [
        "webhooks"
      ]
    },
    "get": {
      "description": "Get an outgoing webhook given the hook id.\n##### Permissions\n`manage_webhooks` for system or `manage_webhooks` for the specific team or `manage_webhooks` for the channel.\n",
      "parameters": [
        {
          "description": "Outgoing webhook GUID",
          "in": "path",
          "name": "hook_id",
          "required": true,
          "type": "string"
        }
      ],
      "responses": {
        "200": {
          "description": "Outgoing webhook retrieval successful",
          "schema": {
            "$ref": "#/definitions/OutgoingWebhook"
          }
        },
        "400": {
          "$ref": "#/responses/BadRequest"
        },
        "401": {
          "$ref": "#/responses/Unauthorized"
        },
        "403": {
          "$ref": "#/responses/Forbidden"
        },
        "404": {
          "$ref": "#/responses/NotFound"
        }
      },
      "summary": "Get an outgoing webhook",
      "tags": [
        "webhooks"
      ]
    },
    "put": {
      "description": "Update an outgoing webhook given the hook id.\n##### Permissions\n`manage_webhooks` for system or `manage_webhooks` for the specific team or `manage_webhooks` for the channel.\n",
      "parameters": [
        {
          "description": "outgoing Webhook GUID",
          "in": "path",
          "name": "hook_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "Outgoing webhook to be updated",
          "in": "body",
          "name": "body",
          "required": true,
          "schema": {
            "properties": {
              "channel_id": {
                "description": "The ID of a public channel or private group that receives the webhook payloads.",
                "type": "string"
              },
              "description": {
                "description": "The description for this incoming webhook",
                "type": "string"
              },
              "display_name": {
                "description": "The display name for this incoming webhook",
                "type": "string"
              },
              "hook_id": {
                "description": "Outgoing webhook GUID",
                "type": "string"
              }
            },
            "required": [
              "hook_id",
              "channel_id",
              "display_name",
              "description"
            ],
            "type": "object"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Webhook update successful",
          "schema": {
            "$ref": "#/definitions/OutgoingWebhook"
          }
        },
        "400": {
          "$ref": "#/responses/BadRequest"
        },
        "401": {
          "$ref": "#/responses/Unauthorized"
        },
        "403": {
          "$ref": "#/responses/Forbidden"
        },
        "404": {
          "$ref": "#/responses/NotFound"
        }
      },
      "summary": "Update an outgoing webhook",
      "tags": [
        "webhooks"
      ]
    }
  },
  "/hooks/outgoing/{hook_id}/regen_token": {
    "post": {
      "description": "Regenerate the token for the outgoing webhook.\n##### Permissions\n`manage_webhooks` for system or `manage_webhooks` for the specific team or `manage_webhooks` for the channel.\n",
      "parameters": [
        {
          "description": "Outgoing webhook GUID",
          "in": "path",
          "name": "hook_id",
          "required": true,
          "type": "string"
        }
      ],
      "responses": {
        "200": {
          "description": "Webhook token regenerate successful",
          "schema": {
            "$ref": "#/definitions/StatusOK"
          }
        },
        "400": {
          "$ref": "#/responses/BadRequest"
        },
        "401": {
          "$ref": "#/responses/Unauthorized"
        },
        "403": {
          "$ref": "#/responses/Forbidden"
        },
        "404": {
          "$ref": "#/responses/NotFound"
        }
      },
      "summary": "Regenerate the token for the outgoing webhook.",
      "tags": [
        "webhooks"
      ]
    }
  }
}